mongoose.connect('mongodb://localhost/quotes');




1) Create a database called 'my_first_db'

use my_first_db

2) Create students collection.

db.createCollection('students')

3) Each document you insert into this collection should have the following format: 
({name: STRING, home_state: STRING, lucky_number: NUMBER, birthday: {month: NUMBER, day: NUMBER, year: NUMBER}})

4) Create 5 students with the appropriate info.

db.students.insert({name: "Evan", home_state: "IL", lucky_number: 14, birthday: {month: 1, day: 4, year: 1991}})
WriteResult({ "nInserted" : 1 })
> db.students.insert({name: "Ken", home_state: "PA", lucky_number: 3, birthday: {month: 5, day: 7, year: 1960}})
WriteResult({ "nInserted" : 1 })
> db.students.insert({name: "Nick", home_state: "WA", lucky_number: 35, birthday: {month: 7, day: 4, year: 1991}})
WriteResult({ "nInserted" : 1 })
> db.students.insert({name: "John", home_state: "CA", lucky_number: 9, birthday: {month: 7, day: 4, year: 1998}})
WriteResult({ "nInserted" : 1 })
> db.students.insert({name: "Casey", home_state: "CA", lucky_number: 60, birthday: {month: 10, day: 22, year: 1983}})
WriteResult({ "nInserted" : 1 })

5) Get all students.

db.students.find().pretty()

6) Retrieve all students who are from California (San Jose Dojo) or Washington (Seattle Dojo).

db.students.find( { $or: [ { home_state: "CA"  }, { home_state: "WA" } ] } )

7) Get all students whose lucky number is:
greater than 3
less than or equal to 10
between 1 and 9 (inclusive)

db.students.find( { lucky_number: { $gt: 3 } } )

db.students.find( { lucky_number: { $lte: 10 } } )

db.students.find( { $and: [ { lucky_number: { $lte: 9 } }, { lucky_number: { $gte: 1 } } ] } )

8) Add a field to each student collection called 'interests' that is an ARRAY.  
It should contain the following entries: 'coding', 'brunch', 'MongoDB'. Do this in ONE operation

db.students.updateMany({name: {$exists: true}, {$set: {interests: ["coding", "brunch", "MongoDB"]}})


9) Add some unique interests for each particular students into each of their interest arrays.

db.students.update({name: "Casey"}, {$push: {interests: 'fitness'}})
db.students.update({name: "Evan"}, {$push: {interests: 'guitar'}})


10) Add the interest 'taxes' into someone's interest array

db.students.update({name: "Ken"}, {$push: {interests: 'taxes'}})

11) Remove the 'taxes' interest you just added.

db.students.update({name: "Ken"}, {$pop: {interests: (1)}})

12) Remove all students who are from California (or Washington).

db.students.deleteMany({$or: [ { home_town: "CA" }, { home_town: "WA" } ]}) 

13) Remove a student by name. 

db.students.deleteOne({name: "Evan"})

14) Remove a student whose lucky number is greater than 5 (JUST ONE)

db.students.deleteOne({lucky_number: {$gt: 5}})

15) Add a field to each student collection called 'number_of_belts' and set it to 0.

db.students.updateMany({name: {$exists: true}}, {$set: {number_of_belts : 0}})

16) Increment this field by 1 for all students in Washington (Seattle Dojo).

db.students.updateMany({home_state: "WA"}, {$set: {number_of_belts : 1}})

17) Rename the 'number_of_belts' field to 'belts_earned'

db.students.updateMany({name: {$exists: true}}, {$rename: {"number_of_belts":"belts_earned"}})

18) Remove the 'lucky_number' field

db.students.updateMany({name: {$exists: true}}, {$unset: {lucky_number : ""}})

19) Add a 'updated_on' field, and set the value as the current date.

db.students.updateMany({name: {$exists: true}}, {$currentDate : {updated_on: true}})